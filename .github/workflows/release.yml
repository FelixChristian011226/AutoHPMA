# .github/workflows/release.yml

name: Build, Package, and Release WPF App (with Auto Version Validation)

on:
  # 当代码被推送到 main 或 master 分支时触发
  push:
    branches:
      - 'main'
      - 'master'
  # 同时也允许在 GitHub Actions 页面手动触发 (无需输入版本号)
  workflow_dispatch:

jobs:
  # ===============================================================
  # Job 1: 校验版本号 (Validate Version)
  # ===============================================================
  validate_version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version_number }}
    steps:
      - name: Checkout repository with all tags
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate Versions and Compare with Latest Tag
        id: get_version
        run: |
          # --- 1. 从文件中提取版本号 ---
          # 修正了 .csproj 文件的路径
          VERSION_CSPROJ=$(grep -oP '<Version>\K[^<]+' AutoHPMA/AutoHPMA.csproj)
          VERSION_PROG_CS=$(grep -oP 'option.DisplayVersion = "\K[^"]+' Build/MicaSetup/Program.cs)
          VERSION_PROG_UN_CS=$(grep -oP 'option.DisplayVersion = "\K[^"]+' Build/MicaSetup/Program.un.cs)

          echo "Found version in .csproj: ${VERSION_CSPROJ}"
          echo "Found version in Program.cs: ${VERSION_PROG_CS}"
          echo "Found version in Program.un.cs: ${VERSION_PROG_UN_CS}"

          # --- 2. 检查三个版本号是否一致 ---
          if [[ -z "$VERSION_CSPROJ" || "$VERSION_CSPROJ" != "$VERSION_PROG_CS" || "$VERSION_CSPROJ" != "$VERSION_PROG_UN_CS" ]]; then
            echo "##[error]Version mismatch detected across files!"
            echo "csproj: $VERSION_CSPROJ, Program.cs: $VERSION_PROG_CS, Program.un.cs: $VERSION_PROG_UN_CS"
            exit 1
          fi
          echo "✅ Version consistency check passed. Using version: ${VERSION_CSPROJ}"
          
          # --- 3. 获取最新的 Git Tag ---
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          LATEST_TAG_VERSION=${LATEST_TAG#v}
          echo "Latest tag version: ${LATEST_TAG_VERSION}"

          # --- 4. 比较新版本和最新 Tag 版本 ---
          HIGHER_VERSION=$(printf '%s\n%s' "$VERSION_CSPROJ" "$LATEST_TAG_VERSION" | sort -V | tail -n1)

          if [[ "$HIGHER_VERSION" != "$VERSION_CSPROJ" || "$VERSION_CSPROJ" == "$LATEST_TAG_VERSION" ]]; then
            echo "##[error]New version (${VERSION_CSPROJ}) must be strictly greater than the latest tag version (${LATEST_TAG_VERSION})."
            exit 1
          fi
          echo "✅ New version check passed. ${VERSION_CSPROJ} > ${LATEST_TAG_VERSION}"

          # --- 5. 输出版本号给后续 Job ---
          echo "version_number=${VERSION_CSPROJ}" >> $GITHUB_OUTPUT

  # ===============================================================
  # Job 2: 构建 WPF 应用 (Publish)
  # ===============================================================
  build_app:
    needs: validate_version # 依赖版本校验
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - name: Restore, Build, and Publish
        run: |
          # 修正了 dotnet 命令，明确指定项目文件路径
          dotnet restore AutoHPMA/AutoHPMA.csproj
          dotnet build AutoHPMA/AutoHPMA.csproj --configuration Release --no-restore
          dotnet publish AutoHPMA/AutoHPMA.csproj --configuration Release --no-build -o ./publish_output
      - name: Upload publish output
        uses: actions/upload-artifact@v4
        with:
          name: publish-output
          path: ./publish_output
          retention-days: 1

  # ===============================================================
  # Job 3: 构建安装包 (Installer Build)
  # ===============================================================
  build_installer:
    needs: [validate_version, build_app] # 依赖版本校验和应用构建
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download publish output
        uses: actions/download-artifact@v4
        with:
          name: publish-output
          path: ./publish_output
      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v2
      - name: Install 7-Zip
        run: choco install 7zip.install --params "'/S'"
      - name: Add 7-Zip to PATH
        run: echo "C:\Program Files\7-Zip" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: pwsh
      - name: Build Installer
        shell: cmd
        run: |
          chcp 65001
          7z a ./publish.7z ./publish_output/*
          move ./publish.7z ./Build/MicaSetup/Resources/Setups/publish.7z
          cd ./Build
          cmd /c build_autohpma.bat
      - name: Upload installer asset
        uses: actions/upload-artifact@v4
        with:
          name: installer-asset
          path: Build/AutoHPMA-Setup.exe
          retention-days: 1

  # ===============================================================
  # Job 4: 构建更新包 (Updater Build)
  # ===============================================================
  build_updater:
    needs: [validate_version, build_app] # 依赖版本校验和应用构建
    runs-on: windows-latest
    outputs:
      version: ${{ needs.validate_version.outputs.version }} # 将版本号传递给 create_release Job
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download publish output
        uses: actions/download-artifact@v4
        with:
          name: publish-output
          path: ./publish_output
      - name: Build Updater and Verify Output
        env:
          APP_VERSION: ${{ needs.validate_version.outputs.version }}
        shell: cmd
        run: |
          chcp 65001
          xcopy /E /I /Y publish_output Update\publish
          cd ./Update
          echo "Running 1-updater.bat..."
          cmd /c "1-updater.bat"
          echo "Running 2-installer.bat with version %APP_VERSION%..."
          cmd /c "2-installer.bat" %APP_VERSION%
          if not exist "AutoHPMA.Install.exe" (
            echo "##[error]Build failed: AutoHPMA.Install.exe was not created."
            exit 1
          )
          echo "Successfully created AutoHPMA.Install.exe."
      - name: Upload updater asset
        uses: actions/upload-artifact@v4
        with:
          name: updater-asset
          path: Update/AutoHPMA.Install.exe
          retention-days: 1

  # ===============================================================
  # Job 5: 创建并上传到 GitHub Release
  # ===============================================================
  create_release:
    needs: [build_installer, build_updater]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download installer asset
        uses: actions/download-artifact@v4
        with:
          name: installer-asset
      - name: Download updater asset
        uses: actions/download-artifact@v4
        with:
          name: updater-asset
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.build_updater.outputs.version }}
          name: Release v${{ needs.build_updater.outputs.version }}
          body: |
            New release v${{ needs.build_updater.outputs.version }}
            Auto-generated by GitHub Actions.
          files: |
            AutoHPMA-Setup.exe
            AutoHPMA.Install.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ===============================================================
  # Job 6: 上传到 R2
  # ===============================================================
  upload_to_r2:
    needs: build_updater
    runs-on: ubuntu-latest
    steps:
      - name: Download updater asset
        uses: actions/download-artifact@v4
        with:
          name: updater-asset
      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install awscli --upgrade --user
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Upload Update Package to Cloudflare R2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.CLOUDFLARE_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.CLOUDFLARE_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: auto
        run: |
          aws s3 cp AutoHPMA.Install.exe \
            s3://${{ secrets.CLOUDFLARE_BUCKET_NAME }}/AutoHPMA.Install.exe \
            --endpoint-url https://${{ secrets.CLOUDFLARE_ACCOUNT_ID }}.r2.cloudflarestorage.com
